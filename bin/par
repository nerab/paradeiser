#!/usr/bin/env ruby

require 'commander/import'
require 'paradeiser'
include Paradeiser

program :version, Paradeiser::VERSION
program :description, "Paradeiser is a command-line tool for the Pomodoro Technique. It keeps track of the current pomodoro and assists the user in managing active and past pomodori as well as breaks. Status commands and reports are provided to get insights."
program :help, 'Author', 'Nicholas E. Rabenau <nerab@gmx.at>'

global_option '-V', '--verbose', 'Enable verbose output'
default_command :help

router = Router.new

begin
  command :init do |c|
    c.syntax  = "#{program(:name)} #{c.name}"
    c.summary = 'Init paradeiser'
    c.action router.dispatch(c)
  end

  command :'pomodoro start' do |c|
    c.syntax  = "#{program(:name)} #{c.name}"
    c.summary = 'Start a new pomodoro'
    c.action router.dispatch(c)
  end
  alias_command :start, :'pomodoro start'

  command :'pomodoro cancel' do |c|
    c.syntax  = "#{program(:name)} #{c.name}"
    c.summary = 'Cancel the active pomodoro'
    c.action router.dispatch(c)
  end
  alias_command :cancel, :'pomodoro cancel'

  command :'pomodoro finish' do |c|
    c.syntax  = "#{program(:name)} #{c.name}"
    c.summary = 'Finish the active pomodoro'
    c.action router.dispatch(c)
  end
  alias_command :finish, :'pomodoro finish'

  command :'pomodoro interrupt' do |c|
    c.syntax  = "#{program(:name)} #{c.name}"
    c.option '--external', 'Record the interruption as external (default is internal)'
    c.summary = 'Records the interruption of the active pomodoro'
    c.action router.dispatch(c)
  end
  alias_command :interrupt, :'pomodoro interrupt'

  command :'pomodoro annotate' do |c|
    c.syntax  = "#{program(:name)} #{c.name}"
    c.summary = 'Annotates the active or most recent pomodoro'
    c.action router.dispatch(c)
  end
  alias_command :annotate, :'pomodoro annotate'

  command :'pomodoro log' do |c|
    c.syntax  = "#{program(:name)} #{c.name}"
    c.summary = 'Logs an already finished pomodoro'
    c.action router.dispatch(c)
  end
  alias_command :log, :'pomodoro log'

  command :'break start' do |c|
    c.syntax  = "#{program(:name)} #{c.name}"
    c.summary = 'Start a break'
    c.action router.dispatch(c)
  end
  alias_command :break, :'break start'

  command :'break finish' do |c|
    c.syntax  = "#{program(:name)} #{c.name}"
    c.summary = 'Finish a break'
    c.action router.dispatch(c)
  end

  command :report do |c|
    c.syntax  = "#{program(:name)} #{c.name}"
    c.summary = 'Show a report on all pomodori'
    c.action router.dispatch(c)
  end

  command :export do |c|
    c.syntax  = "#{program(:name)} #{c.name}"
    c.summary = 'Export all pomodori as JSON'
    c.action router.dispatch(c)
  end

  command :status do |c|
    c.syntax  = "#{program(:name)} #{c.name}"
    c.summary = 'Show status of active pomodoro or break'
    c.action router.dispatch(c)
  end
rescue
  $stderr.puts("Error: #{$!.message}")
  $stderr.puts $!.backtrace if options.trace
  exit(1)
end

# We replace Commander's exit hook with our own in order to set a custom exit status.
at_exit do
  run!
  exit(router.status)
end
